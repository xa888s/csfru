#!/bin/bash
IFS="
"
get_args() {
    while getopts a:o:i:*rw option
    do
        case "${option}"
            in
            a) _key="${OPTARG}";;
            i) _album_dir=$(realpath -e "${OPTARG}"); _spec_dir="$_album_dir"/spectrograms;;
            o) _spec_dir=$(realpath "${OPTARG}"/"${_album_dir##*/}");;
            r) _rm="true";;
            w) _mark="true";;
            *) usage;;
        esac
    done
}

# program usage (displayed when paramaters aren't passed correctly)
usage() {
    printf 'Usage:\n'
    printf 'csfru [options] -i _album_dir\n'
    printf '\nOptions: '
    printf '\n-a PTPIMG key'
    printf '\n-o spectrogram directory (if not specified will output in album directory)'
    printf '\n-r (remove after upload)'
    printf '\n-w [remove credit (link to the forum post)]\n'
    exit
}

get_song_list() {
    # populate an array with the list of songs in album dir
    _song_list=("$_album_dir"/*.flac)

    local _song_list_temp=()
    # create a new array with only basenames
    for _song in "${_song_list[@]}"
    do
        _song_list_temp+=("${_song##*/}")
    done
    # assign that array back to the original
    mapfile -t _song_list < <(printf '%s\n' "${_song_list_temp[@]}" | sort -g)
    unset _song_list_temp
}

create_specs() {
    # attempt to create directories for specs and if it fails exit
    mkdir -p "${_spec_dir:?}"/zoomed "${_spec_dir:?}"/normal || \
        { printf "Couldn't create directories for spectrograms\n"; exit 1; }
    
    # create a zoomed and normal spectrogram for each song
    for _song in "${_song_list[@]}";
    do
        local _song_full="$_album_dir"/"$_song"
        local _spec="${_song%.*}.png"

        sox "$_song_full" -n remix 1 spectrogram -x 3000 -y 513 -z 120 -w Kaiser \
            -o "$_spec_dir"/normal/"$_spec" -t "${_song%.*}" 
        
        sox "$_song_full" -n remix 1 spectrogram -X 500 -y 1025 -z 120 -w Kaiser -S 1:00 -d 0:02 \
            -o "$_spec_dir"/zoomed/"$_spec" -t "${_song%.*}" 

        printf 'Spectrograms of %s created.\n' "$_song"
    done
}

# get length of all tracks and output to a file
get_song_length() {
    printf 'Creating albumdescription.txt\n'
    printf 'Tracklist:\n\n' > "$_spec_dir"/albumdescription.txt
    for _song in "${_song_list[@]}";
    do
        local _song_full="$_album_dir"/"$_song"
        printf '%s' "${_song%.*}" >> "$_spec_dir"/albumdescription.txt
        local _song_length=""
        _song_length=$(ffmpeg -i "$_song_full" 2>&1 | grep Duration | sed -e 's/\,.*//' -e 's/^[^:]*://' -e 's/^[^:]*://' | cut -f 1 -d'.')
        printf ' %s\n' "$_song_length" >> "$_spec_dir"/albumdescription.txt
    done
    { xclip -sel c || pbcopy; } < "$_spec_dir"/albumdescription.txt
    printf 'Copied albumdescription.txt to clipboard\n'
    read -rp 'Press enter when done pasting.'
    { xclip -sel c || pbcopy; } < /dev/null
}

# upload *.png to ptpimg.me. and append link to file
upload() {
    local _pic="$1"
    local _song_name="$2"
    local _type="$3"

    # uploading file
    _link=$(curl -F "file-upload[0]=@${_pic}" -F api_key="$_key" 'https://ptpimg.me/upload.php' | \
        awk -F ':|,' '!(NR%4){print p$2}{p=$2}'| \
        sed 's/^.*"\(.*\)" "\(.*\)".*$/https:\/\/ptpimg.me\/\1.\2/')
    
    # report progress to user
    printf '%s %s has been uploaded.\n' "$_song_name" "$_type"
    printf '%s %s\n' "$_song_name" "$_type" >> "$_spec_dir"/releasedescription.txt

    # append name to file
    printf '[img]%s[/img]\n\n' "$_link" >> "$_spec_dir"/releasedescription.txt
}

# make release description and upload each spectrogram
release() {
    get_song_length

    printf '[spoiler=Spectrograms]' > "$_spec_dir"/releasedescription.txt
    for _song in "${_song_list[@]}";
    do
        local _song_full="$_album_dir"/"$_song"
        local _spec_norm_path="$_spec_dir"/normal/"${_song%.*}".png
        local _spec_zoom_path="$_spec_dir"/zoomed/"${_song%.*}".png
        printf 'Uploading %s\n' "${_song%.*}"
        if [[ "$_song_full" == *','* ]]
        then
            upload "\"$_spec_norm_path\"" "$_song" '(Normal)'
            upload "\"$_spec_zoom_path\"" "$_song" '(Zoomed)'
        else
            upload "$(realpath "$_spec_norm_path")" "$_song" '(Normal)'
            upload "$(realpath "$_spec_zoom_path")" "$_song" '(Zoomed)'
        fi
    done
    printf '[/spoiler]\n' >> "$_spec_dir"/releasedescription.txt
    if [ ! "$_mark" ]
    then
        printf '\nThese spectrals were generated using [url=https://redacted.ch/forums.php?action=viewthread&threadid=33769]csfru[/url]\n' >> "$_spec_dir"/releasedescription.txt
    fi
    
    { xclip -sel c || pbcopy; } < "$_spec_dir"/releasedescription.txt
    printf 'Copied releasedescription.txt to clipboard!\n'

    if [ "$_rm" ]
    then
        read -rp 'Press enter when done pasting.'
        { xclip -sel c || pbcopy; } < /dev/null
        printf 'Removing %s\n' "$_spec_dir"
        rm -rf "${_spec_dir:?}"/*
        rmdir "$_spec_dir"
    fi
}

main() {
    get_args "$@"
    get_song_list
    create_specs

    if [ "$_key" ]
    then
        release
    fi
}

main "$@"
